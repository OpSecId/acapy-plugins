name: Publish ACA-Py with Plugins
run-name: Publish ACA-Py ${{ github.event.release.tag_name || github.event.inputs.version }} with all plugins

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'ACA-Py version to build'
        required: true
        type: string

permissions:
  contents: read
  packages: write

jobs:
  build-and-publish:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        arch: ["amd64", "arm64"]
        include:
          - arch: amd64
            runs-on: ubuntu-24.04
          - arch: arm64
            runs-on: ubuntu-24.04-arm

    name: Build ACA-Py with Plugins (${{ matrix.arch }})
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout ACA-Py Plugins repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Extract version from release or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building ACA-Py with plugins for version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          cache-binary: false
          install: true
          version: latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: repo-owner
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo-owner.outputs.owner }}/acapy-agent
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Create Dockerfile with static plugin list
        run: |
          # Create Dockerfile with static plugin list
          cat > Dockerfile << EOF
          # Dockerfile for ACA-Py with plugins
          FROM ghcr.io/openwallet-foundation/acapy-agent:py3.12-${{ steps.version.outputs.version }}
          
          USER root
          
          # Install plugins
          RUN pip install \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/basicmessage_storage \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/cheqd \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/connection_update \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/connections \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/firebase_push_notifications \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/hedera \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/multitenant_provider \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/oid4vc \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/plugin_globals \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/redis_events \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/rpc \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/status_list \\
              git+https://github.com/${{ github.repository }}@${{ steps.version.outputs.version }}#subdirectory=/webvh
          
          USER acapy
          
          # Set entrypoint
          ENTRYPOINT ["aca-py", "start"]
          EOF

      - name: Build and push Docker image with all plugins
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=acapy-plugins-${{ matrix.arch }}
          cache-to: type=gha,scope=acapy-plugins-${{ matrix.arch }},mode=max

      - name: Display published image info
        run: |
          echo "âœ… Successfully published ACA-Py with all plugins"
          echo "Image: ghcr.io/${{ github.repository_owner }}/acapy-agent:${{ steps.version.outputs.version }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"

  publish-manifest:
    needs: build-and-publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          cache-binary: false
          install: true
          version: latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          docker manifest create \
            ghcr.io/${{ github.repository_owner }}/acapy-agent:${{ steps.version.outputs.version }} \
            --amend ghcr.io/${{ github.repository_owner }}/acapy-agent:${{ steps.version.outputs.version }}-amd64 \
            --amend ghcr.io/${{ github.repository_owner }}/acapy-agent:${{ steps.version.outputs.version }}-arm64
          
          docker manifest push ghcr.io/${{ github.repository_owner }}/acapy-agent:${{ steps.version.outputs.version }}
          
          # Also update latest tag
          docker manifest create \
            ghcr.io/${{ github.repository_owner }}/acapy-agent:latest \
            --amend ghcr.io/${{ github.repository_owner }}/acapy-agent:${{ steps.version.outputs.version }}-amd64 \
            --amend ghcr.io/${{ github.repository_owner }}/acapy-agent:${{ steps.version.outputs.version }}-arm64
          
          docker manifest push ghcr.io/${{ github.repository_owner }}/acapy-agent:latest

      - name: Display final image info
        run: |
          echo "ðŸŽ‰ Multi-architecture image published successfully!"
          echo "Image: ghcr.io/${{ github.repository_owner }}/acapy-agent:${{ steps.version.outputs.version }}"
          echo "Latest: ghcr.io/${{ github.repository_owner }}/acapy-agent:latest"
          echo "Architectures: amd64, arm64"
          echo "Version: ${{ steps.version.outputs.version }}"
